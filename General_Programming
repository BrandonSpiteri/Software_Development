{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "separated-panel",
   "metadata": {},
   "source": [
    "### 1. Fibonacci sequence\n",
    "Sum of first 100 even-valued Fibonacci numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "rubber-spain",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of first 100 even valued Fibonacci Numbers:  290905784918002003245752779317049533129517076702883498623284700\n"
     ]
    }
   ],
   "source": [
    "n1, n2 = 1, 1\n",
    "nth = 0\n",
    "even_fib =[]\n",
    "while len(even_fib)<100:\n",
    "    nth = n1+n2\n",
    "    if (nth%2 == 0):\n",
    "        #print('nth',nth,'n1',n1,'n2',n2)\n",
    "        even_fib.append(nth)\n",
    "    n1=n2\n",
    "    n2=nth\n",
    "print('Sum of first 100 even valued Fibonacci Numbers: ',sum(even_fib))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "advised-chile",
   "metadata": {},
   "source": [
    "### 2. Intersection between Two Sorted Arrays\n",
    "Return unique intersection between 2 sorted arrays.\n",
    "Order: O(len(array1) + len(array2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "residential-former",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "def intersect_arrays(arr1, arr2):\n",
    "    pointer_array1 = 0 \n",
    "    pointer_array2 = 0 \n",
    "    len_1 = len(arr1)\n",
    "    len_2 = len(arr2)\n",
    "    \n",
    "    result = []\n",
    "     \n",
    "    #traverse through each array\n",
    "    while (pointer_array1<len_1 and pointer_array2<len_2):\n",
    "        \n",
    "        if arr1[pointer_array1]==arr2[pointer_array2]: \n",
    "            \n",
    "            # duplicate check against result array\n",
    "            if len(result) > 0 and result[-1] == arr1[pointer_array1]:\n",
    "                pointer_array1+= 1\n",
    "                pointer_array2+= 1\n",
    " \n",
    "            # else no duplicate\n",
    "            else:\n",
    "                result.append(arr1[pointer_array1])\n",
    "                pointer_array1+= 1\n",
    "                pointer_array2+= 1\n",
    "        \n",
    "        #move array1 pointer\n",
    "        elif arr1[pointer_array1] < arr2[pointer_array2]:\n",
    "            pointer_array1+= 1\n",
    "        #move array2 pointer\n",
    "        else:\n",
    "            pointer_array2+= 1\n",
    "    #no intersection, return -1\n",
    "    if not len(result):\n",
    "        return [-1]\n",
    "    \n",
    "    return result\n",
    " \n",
    "#test 2 arrays with duplicate values\n",
    "array1 = [1, 2, 3, 3, 4,5,8]\n",
    "array2 = [2,3,4,5,5,7]\n",
    "     \n",
    "print(intersect_arrays(array1, array2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "enclosed-genome",
   "metadata": {},
   "source": [
    "### 3. Odd Digit within Integer Check\n",
    "Return true if decimal representation of integer contained no odd digits.\n",
    "Else return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "acquired-bathroom",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "from decimal import Decimal\n",
    "\n",
    "# Function to count digits\n",
    "def checkOdd(num):\n",
    "    \n",
    "    if num<0:\n",
    "        return False\n",
    "    \n",
    "    #decimal representation\n",
    "    num = Decimal(num)\n",
    "    \n",
    "    while(num>0):\n",
    "        rem = num%10\n",
    "        if (rem%2 != 0):\n",
    "            return False\n",
    "        num = int(num/10)\n",
    "     \n",
    "    return True\n",
    " \n",
    "# Test\n",
    "num = 80842\n",
    "print(checkOdd(num))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "biblical-details",
   "metadata": {},
   "source": [
    "### 4. Digit Summation\n",
    "Write a function when passed a decimal digit X, returns the value of X+XX+XXX+XXXX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "thirty-target",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3702\n"
     ]
    }
   ],
   "source": [
    "#Using list comprehension\n",
    "def sum_digit(num):\n",
    "    return sum([int(str(num)*i) for i in range(1,5)])\n",
    "\n",
    "print(sum_digit(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "macro-young",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
